@using Microsoft.AspNetCore.Identity;
@using ShopWeb.Models.Domain;

@inject SignInManager<ApplicationUser> signInManager;
@inject UserManager<ApplicationUser> userManager;

@model ShopWeb.Models.ViewModels.ProductVM.ProductDetailViewModel
@{
    ViewData["Title"] = "Product Details";
    ViewData["Check"] = true;
}



<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6" id="product-detail-container">

            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Name</h1>

                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">Giá: @Model.Price</span>
                    <span class="text-secondary">Số lượng: @Model.Quantity</span>
                </div>

                @if (signInManager.IsSignedIn(User))
                {
                    @if (object.Equals(ViewData["Liked"], ViewData["Check"]))
                    {
                        <a id="btnLike" style="cursor: pointer"><i class="bi bi-hand-thumbs-up-fill"></i></a>
                    }
                    else
                    {
                        <a id="btnLike" style="cursor: pointer"><i class="bi bi-hand-thumbs-up"></i></a>
                    }
                }

                <span id="totalLikes" class="mb-3">@ViewData["TotalLikes"]</span><span>Likes</span>

                <div class="mb-3 d-flex">
                    @foreach (var tag in Model.Categories)
                    {
                        <span class="badge bg-secondary">@tag.Name</span>
                    }
                </div>

                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3" />

                <div class="mb-3 product-details-content"> 
                    @Html.Raw(Model.Description)
                </div>
                


                @using (Html.BeginForm("AddToCart", "Cart", FormMethod.Post))
                {
                    <div class="container py-5">
                        @if (Model.Variants != null && Model.Variants.Any())
                        {
                            <div class="variants-container">
                                <h5>Phiên bản:</h5>
                                <select name="chosenVariant" id="chosenVariantSelect">
                                    @foreach (var variant in Model.Variants)
                                    {
                                        @if (variant.FirstOrDefault() != null)
                                        {
                                            <option value=@variant.FirstOrDefault().ProductVariantId>
                                                @foreach (var attribute in variant)
                                                {
                                                    @Html.Raw($"<p>{attribute.Value} </p>")
                                                }
                                            </option>
                                        } else
                                        {
                                            <option>
                                                No Variant
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                        }
                        <input type="hidden" name="productId" value="@Model.Id" />
                        <input type="number" name="quantity" value="1" min="1" class="form-control mb-3" max="@Model.Quantity" oninput="validateInput(this)" />
                        <button type="submit" class="btn btn-dark">Thêm vào giỏ hàng</button>
                    </div>
                }

                <div class="container py-5" id="rating-container">
                    @using (Html.BeginForm("RateProduct", "Products", FormMethod.Post))
                    {

                        @Html.HiddenFor(m => m.Id)
                        <h5>Bạn đánh giá sản phẩm này chất lượng như nào?</h5>
                        <div class="form-group">
                            <select class="form-control" asp-for="Rating">
                                <option value="1">1 Star</option>
                                <option value="2">2 Stars</option>
                                <option value="3">3 Stars</option>
                                <option value="4">4 Stars</option>
                                <option value="5">5 Stars</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-dark">Đánh giá</button>
                    }
                </div>

                <div class="rating">
                    <span class="star" data-value="1">&#9733;</span>
                    <span class="star" data-value="2">&#9733;</span>
                    <span class="star" data-value="3">&#9733;</span>
                    <span class="star" data-value="4">&#9733;</span>
                    <span class="star" data-value="5">&#9733;</span>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5>Bình luận</h5>
                        @if (signInManager.IsSignedIn(User))
                        {
                            @using (Html.BeginForm("Index", "Products", FormMethod.Post))
                            {
                                //@Html.LabelFor(m => m.CommentDescription, new { @class = "col-md-4 control-label mb-3" })
                                @Html.TextBoxFor(m => m.CommentDescription , new { @class = "form-control mb-3" })

                                <button type ="submit" class="btn btn-dark">Gửi</button>
                                <input type="hidden" asp-for="Id" />
                            }
                        }

                    </div>
                    <div class="card-body">
                        @if (Model.Comments != null)
                        {
                            @foreach (var comment in Model.Comments)
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div>
                                            @comment.Description
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span class="text-secondary">@comment.Username</span>
                                            <span class="text-secondary">@comment.TimeAdd.ToShortDateString()</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>



            } else
            {
                <p>No Products Found!</p>
            }

        </div>
    </div>
</div>

@section Scripts {
    <script>
        const btnLikeElement = document.getElementById("btnLike");
        const totalLikesElement = document.getElementById("totalLikes");
        const productId = "@Model.Id";

        $(document).ready(function () {

            var ratingValue = @Html.Raw(Json.Serialize(ViewData["AverageRating"]));
            var roundedRating = Math.round(ratingValue * 2) / 2;


            $('.star').each(function () {
                var starValue = parseFloat($(this).attr('data-value'));
                if (starValue <= roundedRating) {
                    $(this).addClass('active');
                }
            });
        });

        function validateInput(input) {
            var min = parseInt(input.getAttribute('min'));
            var max = parseInt(input.getAttribute('max'));

            // Parse the current value of the input field
            var value = parseInt(input.value);

            // Check if the parsed value is less than the minimum allowed value
            if (value < min) {
                // If the value is less than the minimum, set the value to the minimum allowed value
                input.value = min;
            }

            // Check if the parsed value is greater than the maximum allowed value
            if (value > max) {
                // If the value is greater than the maximum, set the value to the maximum allowed value
                input.value = max;
            }
        }


        async function getTotalLikes() {
            fetch(`/api/productlike/${productId}/totalLikes`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
            }).then(data => data.json()).then(result => {
                totalLikesElement.innerHTML = result;
            });
        }

        async function checkLikeStatus() {
            const hasLiked = localStorage.getItem(`liked_${productId}`);
            if (hasLiked === 'true') {
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                btnLikeElement.removeEventListener('click', addLiketoProduct);
                btnLikeElement.addEventListener('click', removeLikeFromProduct);
            } else {
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up"></i>';
                btnLikeElement.removeEventListener('click', removeLikeFromProduct);
                btnLikeElement.addEventListener('click', addLiketoProduct);
            }
        }

        async function addLiketoProduct() {
            fetch('/api/ProductLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    productId: productId,
                    userId: '@userManager.GetUserId(User)'
                })
            }).then(() => {
                localStorage.setItem(`liked_${productId}`, 'true');
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                btnLikeElement.removeEventListener('click', addLiketoProduct);
                btnLikeElement.addEventListener('click', removeLikeFromProduct);
                getTotalLikes();
            });
        }

        async function removeLikeFromProduct() {
            fetch('/api/ProductLike/Remove', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    productId: productId,
                    userId: '@userManager.GetUserId(User)'
                })
            }).then(() => {
                localStorage.removeItem(`liked_${productId}`);
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up"></i>';
                btnLikeElement.removeEventListener('click', removeLikeFromProduct);
                btnLikeElement.addEventListener('click', addLiketoProduct);
                getTotalLikes();
            });
        }

        btnLikeElement.addEventListener('click', addLiketoProduct);
        checkLikeStatus();
        getTotalLikes();
    </script>
}
