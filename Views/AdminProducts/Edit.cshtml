@model ShopWeb.Models.ViewModels.ProductVM.EditProductRequest
@{
}

<div class="bg-secondary bg-opacity-10 py-2">
    <div class="container">
        <h1>Edit Product - Admin Functionality</h1>
    </div>
</div>

<div class="container py-5" id="productAdmin-container">
    @using (Html.BeginForm("Edit", "AdminProducts", FormMethod.Post))
    {
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Id, new { @class = "col-md-4 control-label" })
            @Html.TextBoxFor(m => m.Id, new { @class = "form-control", @readonly = true })
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Name, new { @class = "col-md-4 control-label" })
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Description, new { @class = "col-md-4 control-label" })
            <textarea class="form-control" id="Description" asp-for="Description"></textarea>
        </div>
        <div class="col-md-8 mb-3">
            <label class="form-label">Featured Image Upload</label>
            <input type="file" id="featuredImageUpload" class="form-control" />

            @if (Model.FeaturedImageUrl != null)
            {
                <img src="@Model.FeaturedImageUrl" id="featuredImageDisplay" style="display:block;width: 300px" />
            } else
            {
                <img src="" id="featuredImageDisplay" style="display:none;width: 300px" />
            }
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.FeaturedImageUrl, new { @class = "col-md-4 control-label" })
            @Html.TextBoxFor(m => m.FeaturedImageUrl, new { @class = "form-control", id = "featuredImageUrl" })
        </div>

        <div class="col-md-8 mb-3">
            <label class="form-label">Additional Images Upload</label>
            <input type="file" multiple id="additionalImagesUpload" name="AdditionalImages" class="form-control" />
            <div id="additionalImagesPreview"></div>
            <div id="additionalImagesDisplay" class="mt-2">
                @if (Model.AdditionalImageUrls != null && Model.AdditionalImageUrls.Any())
                {
                    foreach (var imageUrl in Model.AdditionalImageUrls)
                    {
                        <img src="@imageUrl" style="display:block;width: 100px;" />
                    }
                }
            </div>
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Price, new { @class = "col-md-4 control-label" })
            @Html.TextBoxFor(m => m.Price, new { @class = "form-control" })
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Quantity, new { @class = "col-md-4 control-label" })
            @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control" })
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Categories, new { @class = "col-md-4 control-label" })
            <select class="form-select" asp-items="@Model.Categories" asp-for="SelectedCategory">
            </select>
        </div>


       



        <div class="col-md-8 mb-3">
            <button type="submit" class="btn btn-dark">Lưu</button>
        </div>
    }
</div>


@section Scripts {
    <script>
        var editor = new FroalaEditor("#Description", {
            imageUploadURL: '/api/images'
        });


        const featuredUploadElement = document.getElementById("featuredImageUpload");
        const featuredImageUrlElement = document.getElementById("featuredImageUrl");
        const featuredImageDisplayElement = document.getElementById("featuredImageDisplay");

        

        async function uploadFeaturedImage(e) {
            console.log(e.target.files[0]);

            let data = new FormData();
            data.append('file', e.target.files[0]);

            await fetch('/api/images', {
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                },
                body: data
            }).then(response => response.json())
                .then(result => {
                    console.log(result)
                    featuredImageUrlElement.value = result.link;
                    featuredImageDisplayElement.src = result.link;
                    featuredImageDisplayElement.style.display = 'block';
                });

        }
        async function uploadAdditionalImages(e) {
            let files = e.target.files;
            let previewContainer = document.getElementById('additionalImagesPreview');
            previewContainer.innerHTML = ''; // Clear existing previews

            for (let i = 0; i < files.length; i++) {
                let data = new FormData();
                data.append('file', files[i]);

                let response = await fetch('/api/images', {
                    method: 'POST',
                    headers: { 'Accept': '*/*' },
                    body: data
                });
                let result = await response.json();

                let img = document.createElement('img');
                img.src = result.link;
                img.classList.add('img-thumbnail');
                img.style.width = '100px';
                previewContainer.appendChild(img);

                // Store URLs in hidden inputs for form submission
                let hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'AdditionalImageUrls';
                hiddenInput.value = result.link;
                previewContainer.appendChild(hiddenInput);
            }
        }

        featuredUploadElement.addEventListener('change', uploadFeaturedImage);
        document.getElementById('additionalImagesUpload').addEventListener('change', uploadAdditionalImages);

        document.addEventListener('DOMContentLoaded', () => {
            const additionalImagesUpload = document.getElementById('additionalImagesUpload');
            const additionalImagesPreview = document.getElementById('additionalImagesPreview');
            const additionalImagesDisplay = document.getElementById('additionalImagesDisplay');

            additionalImagesUpload.addEventListener('change', () => {
                const files = additionalImagesUpload.files;
                additionalImagesPreview.innerHTML = ''; // Clear previous previews

                if (files.length > 0) {
                    for (const file of files) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.style.display = 'block';
                            img.style.width = '100px';
                            additionalImagesDisplay.appendChild(img);
                        };
                        reader.readAsDataURL(file);
                    }
                    additionalImagesPreview.style.display = 'block';
                    additionalImagesDisplay.style.display = 'none';
                } else {
                    additionalImagesPreview.style.display = 'none';
                    additionalImagesDisplay.style.display = 'block';
                }
            });
        });

    </script>
}