@model ShopWeb.Models.ViewModels.ProductVM.AddProductRequest
@{
}



<div class="bg-secondary bg-opacity-10 py-2">
    <div class="container">
        <h1>Add New Product - Admin Functionality</h1>
    </div>
</div>

<div class="container py-5" id="productAdmin-container">
    @using (Html.BeginForm("Add", "AdminProducts", FormMethod.Post, new { id = "productForm" }))
    {
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Name, new { @class = "col-md-4 control-label" })
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Description, new { @class = "col-md-4 control-label" })
            <textarea class="form-control" id="Description" asp-for="Description"></textarea>
        </div>
        <div class="col-md-8 mb-3">
            <label class="form-label">Ảnh chính</label>
            <input type="file" id="featuredImageUpload" class="form-control"/>
            <img src="" id="featuredImageDisplay" style="display:none;width: 300px" />
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.FeaturedImageUrl, new { @class = "col-md-4 control-label" })
            @Html.TextBoxFor(m => m.FeaturedImageUrl, new { @class = "form-control", id="featuredImageUrl" })
        </div>
        <div class="col-md-8 mb-3">
            <label class="form-label">Ảnh phụ</label>
            <input type="file" id="additionalImagesUpload" class="form-control" name="AdditionalImages" multiple />
            <div id="additionalImagesPreview"></div>
        </div>

        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Price, new { @class = "col-md-4 control-label" })
            @Html.TextBoxFor(m => m.Price, new { @class = "form-control" })
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Quantity, new { @class = "col-md-4 control-label" })
            @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control" })
        </div>
        <div class="col-md-8 mb-3">
            @Html.LabelFor(m => m.Categories, new { @class = "col-md-4 control-label" })
            <select class="form-select" asp-items="@Model.Categories" asp-for="SelectedCategory"></select>
        </div>

        <!-- Initial form for adding variant attributes -->
        <div id="check">
            <div id="variantForms">
                <div class="variant-form" id="variant-form0">
                    <div class="form-group" id="form-group-variant-name">
                        <label for="variantName">Variant Name</label>
                        <input type="text" class="form-control" name="VariantNameForm" placeholder="Enter variant name">
                    </div>
                    <div class="form-group" id="form-group-variant-value">
                        <label for="variantValue">Variant Value</label>
                        <input type="text" class="form-control" name="VariantValueForm" placeholder="Enter variant value">
                    </div>
                    <button type="button" class="btn btn-secondary add-variant-value-btn" data-form-key="variant-form0">More Variant Value</button>
                </div>
            </div>
        </div>

        <!-- Button to add more variant forms -->
        <button type="button" class="btn btn-secondary" id="addVariantBtn">Add Variant Attribute</button>
        <button type="button" class="btn btn-secondary" id="doneBtn">Done</button>
        <hr />

        <!-- Table to display variant attributes -->
        <h2>Variant Attributes</h2>
        <div id="table-variant-container">
            <table class="table" id="variant-table">
                <thead id="variantAttributesHead">
                    <tr></tr>
                </thead>
                <tbody id="variantAttributesBody">
                    <tr></tr>
                </tbody>
            </table>
        </div>

        <div class="col-md-8 mb-3">
            <button type="submit" class="btn btn-dark">Submit</button>
        </div>
    }
</div>

@section Scripts {
    <script>
        var editor = new FroalaEditor("#Description", {
            imageUploadURL: '/api/images'
        });


        const featuredUploadElement = document.getElementById("featuredImageUpload");
        const featuredImageUrlElement = document.getElementById("featuredImageUrl");
        const featuredImageDisplayElement = document.getElementById("featuredImageDisplay");
        const variantTableElement = document.getElementById("variant-table")





        $('#testBtn').click(function () {
            // Call the sendDataToBackend function to send data to the backend
            gatherFormData();
        });

        // Define your custom function to gather form data
        function gatherFormData() {
            var variantData = [];

            $('#variant-table tbody tr').each(function () {
                var rowData = {};

                $(this).find('td').each(function (index) {
                    // Check if the cell contains an input field
                    if ($(this).find('input').length === 0) {
                        // Get the text content of the cell and trim any leading or trailing whitespace
                        var attribute = $(this).text().trim();

                        // Store the data in the rowData object using the cell index as the key
                        rowData['attribute' + index] = attribute;
                    }
                });

                // Get the values from the input fields
                var price = $(this).find('input[name^="Price"]').val();
                var quantity = $(this).find('input[name^="Quantity"]').val();

                // Store the data in an object
                rowData.price = price;
                rowData.quantity = quantity;

                // Push the object to the variantData array
                variantData.push(rowData);
            });
            console.log(variantData);
            return variantData;
        }


        async function renderCombinations(array) {
            var combinations = [];
            var currentCombination = [];

            // Recursive function to generate combinations
            function generateCombinations(index) {
                if (index >= array.length) {
                    combinations.push(currentCombination.slice()); // Push a copy of the current combination
                    return;
                }

                for (var i = 0; i < array[index].length; i++) {
                    currentCombination.push(array[index][i]);
                    generateCombinations(index + 1);
                    currentCombination.pop(); // Backtrack to try the next element in the current array
                }
            }

            generateCombinations(0); // Start generating combinations from the first array

            // Render combinations
            //for (var j = 0; j < combinations.length; j++) {
            //    console.log(combinations[j].join(' ')); // Render each combination as a string separated by space
            //}


            for (var i = 0; i < combinations.length; i++) {
                var combination = combinations[i];
                var row = '<tr>';

                for (var j = 0; j < combination.length; j++) {
                    row += '<td><input type="text" id="thead-table" class="form-control" name="VariantAttributes[' + i + '].Value['+j+']" value="'+combination[j]+'" readonly></td>'
                }

                row += '<td><input type="text" class="form-control" name="VariantAttributes[' + i + '].Price" placeholder="Enter price"></td>' +
                    '<td><input type="text" class="form-control" name="VariantAttributes['+ i +'].Quantity" placeholder="Enter quantity"></td>' +
                    '</tr>';

                $('#variantAttributesBody').append(row);
            }

        }

        
        async function uploadFeaturedImage(e) {
            console.log(e.target.files[0]);

            let data = new FormData();
            data.append('file', e.target.files[0]);

            await fetch('/api/images', {
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                },
                body: data
            }).then(response => response.json())
                .then(result => {
                    console.log(result)
                    featuredImageUrlElement.value = result.link;
                    featuredImageDisplayElement.src = result.link;
                    featuredImageDisplayElement.style.display = 'block';
                });

        }

        async function uploadAdditionalImages(e) {
            let files = e.target.files;
            let previewContainer = document.getElementById('additionalImagesPreview');
            previewContainer.innerHTML = ''; // Clear existing previews

            for (let i = 0; i < files.length; i++) {
                let data = new FormData();
                data.append('file', files[i]);

                let response = await fetch('/api/images', {
                    method: 'POST',
                    headers: { 'Accept': '*/*' },
                    body: data
                });
                let result = await response.json();

                let img = document.createElement('img');
                img.src = result.link;
                img.classList.add('img-thumbnail');
                img.style.width = '100px';
                previewContainer.appendChild(img);

                // Store URLs in hidden inputs for form submission
                let hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'AdditionalImageUrls';
                hiddenInput.value = result.link;
                previewContainer.appendChild(hiddenInput);
            }
        }

        featuredUploadElement.addEventListener('change', uploadFeaturedImage);
        document.getElementById('additionalImagesUpload').addEventListener('change', uploadAdditionalImages);

        


        $(document).ready(function () {
            var variantCounter = 1;
            var variantValueCounter = 1;

            

            async function updateTableColumns() {
                $('#variantAttributesHead tr').empty();
                $('#variantAttributesBody tr').empty();

                $('[name="VariantNameForm"]').each(function (index) {
                    var variantName = $(this).val(); // Get the value of the input field

                    // Append a table header with the variant name to the table head
                    $('#variantAttributesHead tr').append('<th><input type="text" class="form-control value-only text-light" name="VariantAttributes[0].Name['+index+']" value="'+variantName+'" readonly></th>');
                });

                $('#variant-table #variantAttributesHead tr').append('<th>Price</th>');
                $('#variant-table #variantAttributesBody tr').append('<td><input type="text" class="form-control" /></td>');
                $('#variant-table #variantAttributesHead tr').append('<th>Quantity</th>');
                $('#variant-table #variantAttributesBody tr').append('<td><input type="text" class="form-control" /></td>');

            }


            async function updateTableRows() {
                var variantNames = [];
                var variantValuesArray = [];

                $('.variant-form').each(function () {
                    var variantValues = [];
                    $(this).find('input[name="VariantValueForm"]').each(function () {
                        var value = $(this).val();
                        variantValues.push(value);
                    });
                    variantValuesArray.push(variantValues);
                });


                // Clear existing table rows
                $('#variantAttributesBody').empty();

                //console.log(variantValuesArray);

                // Generate table rows


                renderCombinations(variantValuesArray);

                
            }





            

            // Function to add a new variant form
            function addVariantForm() {3
                var newForm = '<div class="variant-form" id="variant-form'+ variantCounter +'">' +
                    '<button type="button" class="btn btn-danger delete-variant-btn"><i class="bi bi-x-circle"></i></button>' +
                    '<div class="form-group" id="form-group-variant-name">' +
                    '<label for="variantName">Variant Name</label>' +
                    '<input type="text" class="form-control" name="VariantNameForm" placeholder="Enter variant name">' +
                    '</div>' +
                    '<div class="form-group" id="form-group-variant-value">' +
                    '<label for="variantValue">Variant Value</label>' +
                    '<input type="text" class="form-control" name="VariantValueForm" placeholder="Enter variant value">' +
                    '<button type="button" class="btn btn-secondary add-variant-value-btn" data-form-key="variant-form' + variantCounter + '" >More Variant Value</button>' +
                    '</div>' + 
                    '</div>';

                $('#variantForms').append(newForm);
            }


            $('#addVariantBtn').click(function () {
                addVariantForm();
                variantCounter++;
                
            });

            $('#doneBtn').click(function () {
                updateTableColumns();
                updateTableRows();
            })


            function addVariantValueForm(formKey) {
                var newForm =
                    '<div class="form-group" id="form-group-variant-value">' +
                    '<label for="variantValue">Variant Value</label>' +
                    '<div class="input-group">' +
                    '<input type="text" class="form-control" name="VariantValueForm" placeholder="Enter variant value">' +
                    '<button type="button" class="btn btn-danger delete-variant-value-btn"><i class="bi bi-x-circle"></i></button>' +
                    '</div>' +
                    '</div>';

                $('#' + formKey).append(newForm);
            }

            $(document).on('click', '.add-variant-value-btn', function () {
                var formKey = $(this).data('form-key');
                addVariantValueForm(formKey);
                //console.log(variantValueCounter)
            });

            $(document).on('click', '.delete-variant-value-btn', function () {
                $(this).closest('.form-group').remove();
            });
            $(document).on('click', '.delete-variant-btn', function () {
                $(this).closest('.variant-form').remove(); 

            });





            


        });



    </script>
}